{"version":3,"sources":["buffer-utils.ts"],"names":[],"mappings":"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","file":"buffer-utils.js","sourcesContent":["const bufferProto = Buffer.prototype;\n\n/* tslint:disable:no-invalid-this */\nfunction writeIntLE(data: number, offset: number, size: number): number {\n    if (size === 1) {\n        return this.writeInt8(data, offset);\n    }\n    if (size === 2) {\n        return this.writeInt16LE(data, offset);\n    }\n    throw new Error('Size not supported in this polyfill. Buffer.writeIntLE:' + size);\n}\n\nfunction readIntLE(offset: number, size: number): number {\n    if (size === 1) {\n        return this.readInt8(offset);\n    }\n    if (size === 2) {\n        return this.readInt16LE(offset);\n    }\n    throw new Error('Size not supported in this polyfill, Buffer.readIntLE:' + size);\n}\n/* tslint:enable:no-invalid-this */\n\nbufferProto.writeIntLE = bufferProto.writeIntLE || writeIntLE;\nbufferProto.readIntLE = bufferProto.readIntLE || readIntLE;\n\n/**\n * Read buffer with auto incremented offset\n * @param buffer\n * @constructor\n */\nexport class BufferReader {\n    private buffer: Buffer;\n    private offset: number = 0;\n\n    constructor(buffer: Buffer) {\n        this.buffer = buffer;\n    }\n\n    /**\n     * Read int in Big-endian order from internal buffer\n     * @param size\n     * @returns {*}\n     */\n    public readIntLE(size: number): number {\n        const data = this.buffer.readIntLE(this.offset, size);\n        this.offset += size;\n        return data;\n    };\n\n    public readMultibyteNumLE(size: number): number {\n        let num: number;\n        switch (size) {\n            case 2:\n                num = this.buffer.readUInt16LE(this.offset);\n                break;\n            case 4:\n                num = this.buffer.readUInt32LE(this.offset);\n                break;\n            default:\n                throw new Error(size + ' is not supported as multibyte number');\n        }\n        this.offset += size;\n        return num;\n    };\n\n    /**\n     * Read size of data to a buffer from internal buffer\n     * @param size\n     * @returns {*}\n     */\n    public readBuffer(size: number): Buffer {\n        const data = this.buffer.slice(this.offset, this.offset + size);\n        this.offset += size;\n        return data;\n    };\n\n    /**\n     * Read size of string from buffer\n     * @param size\n     * @returns {*|string}\n     */\n    public readString(size: number): string {\n        return this.readBuffer(size).toString('utf8');\n    };\n}\n\n/**\n * Write buffer with auto incremented offset\n * @param buffer\n * @constructor\n */\nexport class BufferWriter {\n    private buffer: Buffer;\n    private offset: number = 0;\n\n    constructor(buffer: Buffer) {\n        this.buffer = buffer;\n    };\n\n    /**\n     * Write  int to buffer in Big-endian order\n     * @param data\n     * @param size\n     */\n    public writeIntLE(data: number, size: number) {\n        this.buffer.writeIntLE(data, this.offset, size);\n        this.offset += size;\n    };\n\n    public writeMultibyteNumLE(data: number, size: number) {\n        switch (size) {\n            case 2:\n                this.buffer.writeUInt16LE(data, this.offset);\n                break;\n            case 4:\n                this.buffer.writeUInt32LE(data, this.offset);\n                break;\n            default:\n                throw new Error(size + ' is not supported as multibyte number');\n        }\n        this.offset += size;\n    };\n\n    /**\n     * Write string in utf8 format to the buffer\n     * @param data\n     * @param size\n     */\n    public writeString(data: string, size: number) {\n        this.buffer.write(data, this.offset, size, 'utf8');\n        this.offset += size;\n    };\n\n    /**\n     * Copy size of data from srcBuffer to the internal buffer\n     * @param srcBuffer\n     * @param size\n     */\n    public copyFrom(srcBuffer: Buffer, size: number) {\n        srcBuffer.copy(this.buffer, this.offset);\n        this.offset += size;\n    };\n\n    /**\n     * Get back internal buffer\n     * @returns {*}\n     */\n    public getBuffer(): Buffer {\n        return this.buffer;\n    };\n\n}\n"]}